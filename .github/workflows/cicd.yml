name: ci-cd

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

env:
  REGISTRY: ghcr.io

jobs:
  tests:
    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:alpine
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: secret
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          - 5432:5432
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Get pip cache dir
        id: pip-cache-dir
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Ð¡aching dependencies
        id: cache-pip
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Check code style with black
        run: black --check .

      - name: Check imports ordering with isort
        run: isort -c .

      - name: Lint with flake8
        run: flake8 .

#      - name: Test with pytest
#        run: pytest --cov=apps
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: secret

#  build:
#    if: github.event_name == 'push'
#    needs: tests
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ github.token }}
#
#      - id: image_name
#        uses: ASzc/change-string-case-action@v2
#        with:
#          string: ${{ github.repository }}
#
#      - name: Build and push
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          push: true
#          tags: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.lowercase }}:latest
#          cache-from: type=gha
#          cache-to: type=gha,mode=max
#
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - id: image_name
#        uses: ASzc/change-string-case-action@v2
#        with:
#          string: ${{ github.repository }}
#
#      - name: Connect via SSH, pull, restart
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SSH_SERVER }}
#          username: ${{ secrets.SSH_USER }}
#          key: ${{ secrets.SSH_KEY }}
#          script: |
#            cd backend
#
#            echo "${{ github.token }}" | docker login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin
#            docker pull ${{ env.REGISTRY }}/${{ steps.image_name.outputs.lowercase }}:latest
#
#            docker-compose down
#            docker-compose up -d
#
#            for image in $(docker images | grep none | awk '{print $3}' | cat); do docker rmi "$image"; done
#
#            docker-compose ps
